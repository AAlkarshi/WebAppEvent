name: CI - Symfony Tests

# Déclenche le workflow à chaque push ou pull request sur ces branches
on:
  push:
    branches: [ master, main, develop ]
  pull_request:

jobs:
  tests:
    # Utilisation d'un runner Ubuntu
    runs-on: ubuntu-latest

    # Configuration du service MySQL
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: Abdullrahman
          MYSQL_DATABASE: symfony_test_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -uroot -pAbdullrahman"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      # 1️⃣ Récupère le code source depuis GitHub
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      # 2️⃣ Installe PHP et les extensions nécessaires
      - name: ⚙️ Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          extensions: mbstring, intl, pdo_mysql
          coverage: none

      # 3️⃣ Installe les dépendances Composer
      - name: 📦 Install Composer dependencies
        run: composer install --no-progress --no-interaction --prefer-dist

      # 4️⃣ Configure les variables d'environnement Symfony pour la base de test
      - name: 🗃️ Configure .env for tests
        run: |
          cp .env.test .env.local
          sed -i '/^DATABASE_URL/d' .env.local
          echo 'DATABASE_URL="mysql://root:Abdullrahman@mysql:3306/symfony_test_test?serverVersion=8.0&charset=utf8mb4"' >> .env.local
          cat .env.local


        # 🔥 Nouvelle méthode : on attend le healthcheck du service
      - name: ⏱ Wait for MySQL to be ready
        run: |
          for i in {1..60}; do
            if mysqladmin ping -h mysql -uroot -pAbdullrahman --silent; then
              echo "✅ MySQL is ready!"
              break
            fi
            echo "Waiting for MySQL..."
            sleep 2
          done

      - name: 🧱 Prepare database
        run: |
          php bin/console doctrine:database:create --env=test || echo "Database already exists"
          php bin/console doctrine:migrations:migrate --env=test --no-interaction


      # 6️⃣ Crée la base de test si elle n'existe pas et applique les migrations
      - name: 🧱 Run database migrations
        run: |
          php bin/console doctrine:database:create --env=test || echo "Database already exists"
          php bin/console doctrine:migrations:migrate --env=test --no-interaction

      # 7️⃣ Exécute tous les tests unitaires PHPUnit
      - name: 🧪 Run PHPUnit tests
        run: php bin/phpunit --testdox

      # 8️⃣ Optionnel : exécute uniquement les tests de CategoryController
      - name: 🧪 Run category tests only
        run: php bin/phpunit tests/Controller/CategoryControllerTest.php --testdox
